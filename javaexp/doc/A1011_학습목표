**상속과 그것을 둘러싼 다양한 요소들의 세계에 오신 것을 환영합니다!** 🏰


### 1. 흥미로운 도입
왕국의 왕이 되기 위해서는 왕의 아들이나 딸이 되어야 한다고 상상해보세요. 
왕의 자식들은 왕의 특권과 재산을 상속받게 됩니다. 하지만 왕의 모든 특징을 
그대로 가져오는 것이 아니라, 각자의 특별한 능력이나 특징을 추가로 가질 수 
있습니다. 이와 같이 프로그래밍 세계에서도 클래스들은 다른 클래스로부터 
특성을 '상속' 받아, 그 위에 새로운 특징을 추가하거나 기존의 특징을 
'재정의' 할 수 있습니다.


### 2. 학습목표
- 상속의 개념과 그 중요성을 이해합니다.
- 메서드 재정의와 다형성의 원리를 파악합니다.
- 접근 제어자의 종류와 사용법을 배웁니다.
- 추상 클래스의 필요성과 그 활용 방법을 알아봅니다.


### 3. 주요 핵심 키워드와 개념
- **상속(Inheritance)**: 부모 클래스의 특성을 자식 클래스가 받아오는 것.
- **메서드 재정의(Override)**: 상속받은 메서드의 내용을 변경하는 것.
- **다형성(Polymorphism)**: 하나의 메서드나 클래스가 여러 가지 방법으로 동작하는 것.
- **접근 제어자(Access Modifiers)**: 클래스, 메서드, 필드의 접근 범위를 지정 
		(`public`, `protected`, X, `private`).
- **추상 클래스(Abstract Class)**: 인스턴스화 될 수 없으며, 
		하나 이상의 추상 메서드를 포함하는 클래스.
		
		
### 4. 생각하고 토론해볼 내용
- 상속은 항상 유용한가요? 상속의 장단점은 무엇이 있을까요?
- 다형성을 활용하는 것이 코드 관리와 확장성에 어떤 영향을 미칠까요?
- 왜 일부 메서드나 필드에는 제한된 접근 제어자를 사용해야 할까요? 
	그리고 그 기준은 어떻게 결정될까요?
- 추상 클래스와 인터페이스의 차이점은 무엇일까요? 
	각각 언제 사용하는 것이 좋을까요?
	
	
### 5. 간단한 퀴즈
1) 부모 클래스의 `private` 메서드는 자식 클래스에서 어떻게 됩니까?
   - a) 그대로 상속받는다.
   - b) 재정의할 수 있다.
   - c) 상속받지만 호출할 수 없다.
   - d) 상속받지 않는다.
   
2) 추상 클래스를 직접 인스턴스화할 수 있을까요?
   - a) 네, 가능하다.
   - b) 아니오, 불가능하다. 
   
3) 다형성의 가장 큰 장점은 무엇입니까?
   - a) 코드 최적화
   - b) 메모리 절약
   - c) 코드 재사용성과 확장성
   - d) 빠른 실행 속도

상속과 관련된 이러한 개념들은 객체 지향 프로그래밍의 핵심 중 하나입니다. 
이러한 기본 개념을 깊게 이해하면 프로그래밍 능력을 크게 향상시킬 수 있습니다.