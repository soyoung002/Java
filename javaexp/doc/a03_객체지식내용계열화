* 교제 P.114 참고

# 객체의 학습을 위한 내용 계열화
1. 자바 객체의 학습 내용을 계열화하면 기본부터 고급까지 순차적으로 학습할 수 있는 구조를 가질 수 있다.

2. 단계별 내용
	1) 자바 클래스 기초
		- 클래스와 객체란?			==>클래스:도면/객체:도면으로 완성된 건물
			클래스의 정의와 필요성
			객체의 개념과 클래스와의 관계 : 클래스는 객체를 생성하기 위한 필드와 메소드가 정의
		- 클래스의 선언과 구조
			접근 제한자의 			==> package public/X(default)
			클래스 이름 정의 규칙(대문자로 첫자를 시작한다)
			클래스명 앞에 접근제어자는 다른 곳에서 호출할 때, 아래 코드에 영향을 미친다.
			ex) 접근제어자 class Person{}
			Person p01;		//이렇게 객체 생성을 위한 선언시, 위 접근제어자에 따라 같은 패키지일 때는 
								접근을 할 수 X(default)일때 접근 가능 다른 패키지이면 접근제어자 X(default)는 접근 할 수 없다.
								public이면 다른 패키지일 때는 import와 함께 접근이 가능하다
		- 객체의 생성과 사용
			new 키워드와 생선자		 ==> new Person()
									person p01= new Person()
			객체 참조 변수
	2) 클래스의 구성요소
		- 필드(field)
			변수 vs 필드의 차이
			접근 제한자와 필드
		- 메소드(method)
			메소드의 선언과 호출
			반환값과 매개변수
		- 생성자(constructor)
			생성자의 역할
			기본 생성자와 매개변수 있는 생성자
		- this 키워드
			this의 사용법과 필요성
	3) 객체 관계성 설정
		- 1:1 ==> 객체 안에 객체를 호출
		- 1:다 ==> 객체 안의 다중을 호출
	4) 고급 클래스 특징
		- 정적 멤버(static members) : 객체 생성 없이 사용해야 할 구성요소..ex)Math.random(), Math.PI
			static 키워드의 의미
			정적 필드와 정적 메서드
		- 클래스의 상속(inheritance)
			extends 기워드와 상속의 개념
			super 키워드
			접근제어자
		- ★ 추상클래스와 인터페이스(abstract class & interface)
			추상 클래스의 정의와 사용
			인터페이스의 정의와 사용
			
	5) 객체 지향 프로그램(OOP) 원칙
		- 캡슐화(Encapsulation)
		- 상속(Inheritance0
		- 다형성(Polymorphism)
		- 추상화(Abstraction)		
		
		
		* 객체는 필드(속성)과 메소드(동작)으로 구성된 자바 객체로 모델링 가능
		* 객체의 상호 작용 : 객체들은 서로 간의 기능(동작을 이용하고 데이터를 주고 받음) 
		
			
			