# 추상화 #

	1. 이유
		- 복잡한 시스템을 단순화시켜 개념적으로만 표현하려는 의도로 사용
		- 불필요한 정보를 숨기고 중요한정보만을 표현함으로써 효율적인 설계와 구현이 가능해짐
	2. 장점 
		- 시스템 복잡도 감소 : 필요한 특성만을 나타내어 복잡도를 줄인다
		- 유지보수 용이 : 기본 구조 변경 없이 구현 내용만을 수정하여 시스템을 업데이트 할 수 있다
		- 확장성 : 기본 구조를 바꾸지 않고 새로운 기능을 추가하기 쉽다.
	3. 실무적 정용 예시
		- 데이터베이스 연결 : 데이터베이스에 연결하고 쿼리를 실행하는 복잡한 과정을 숨기고, 
							사용자에게는 간단한 메서드들만 제공한다(JDBC, ORM 라이브러리)





# 다형성 #

	1. 이유
		- 하나의 인터페이스나 클래스를 다양한 방법으로 동ㅇ작하게 하여 유연성과 학장성을 증가시킨다.
		- 코드의 재사용성을 높이며, 유지보수를 용이하게 한다.
	2. 장점
		- 유연성 : 하나의 메서드나 클래스가 다양한 객체나 데이터 타입에 대해서 동작 할 수 있다.
				  추가되는 객체들이 생기면 상속으로 처리하고, 
				  추가되는 기능 메서드만 재정의
				  
				  
				  (ex) Part p02 = new Cpu();
					   p02.comInfo2();
					   
					   
		- 코드의 재사용성 : 코드의 중복을 줄이고 통일된 인터페이스를 제공함으로써 코드의 재사용성이 높아진다.
						
						
						(ex) public void commInfo() {
						System.out.println("컴퓨터 부품입니다")
						}
						public abstract void commInfo2();
						핵심적으로 기능만 선언, 구체적인 내용은 상속받은 하위 클래스에서 처리
	
	
		- 유지보수 용이 : 기본 구조 변경 없이 구현내용만을 수정하여 시스템을 업데이트 할 수 있다.
	
	
					public class GraphicsCard extends Part{
						public abstract void execute() {
						//추가적인 재정의 할 내용만 선언..
						}
					}
					
					==> 공통 기능메서드 변경으로 상속받은 모든 클래스에 적용 가능
					
					하나의 메서드나 클래스 수정으로 다양한 객체나 데이터 타입에 대한 동작을 변경할 수 있다.
					(ex) Part의 commiNfo() 공통 부분 변경.. 상속하는 모든 클래스가 동일하게 변경
	
	
	
		- 확장성 : 기본 구조를 바꾸지 않고 새로운 기능을 추가하기 쉽다.			



# 실무적 사용 예시 #

		- 그래픽 사용자 인터페이스(GUI) 컴포넌트 
			: 다양한 GUI컴포넌트(버튼,체크박스,슬라이더 등)가 같은 메서드( draw(), update() )를 가지고 있지만 
				각 컴포넌트마다 그 동작이 다르다
		- 결제 시스템
			: 다양한 결제 방법(카드, 페이팔, 비트코인등)이 있을때 
				Payment 인터페이스를 구현하는 
				각 클래스(CardPayment, PaypalPayment, BitcoinPayment 등..)가 
				processPayment() 메서드를 오버라이드하여 각기 다른 결제 방식을 제공한다.
			